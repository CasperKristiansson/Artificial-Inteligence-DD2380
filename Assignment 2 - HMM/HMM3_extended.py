"""
On the standard input matrixes the trained data yields:
1000 input:
3 3 0.678259 0.018603 0.303139 0.101556 0.787898 0.110546 0.197291 0.279302 0.523407
3 4 0.705729 0.219791 0.07448 0.0 0.065005 0.427735 0.285894 0.221366 0.0 0.026294 0.339141 0.634565
Converged in: 35

10000 input:
3 3 0.701813 0.062169 0.236019 0.113043 0.782177 0.10478 0.172806 0.298781 0.528412
3 4 0.702762 0.190919 0.106319 0.0 0.103491 0.404835 0.296507 0.195167 0.0 0.134953 0.183029 0.682018
Converged in: 26
----------------------------------------

Matrixes 2 (Question 7)
1000 input:
3 3 0.70446 0.010468 0.285072 0.102293 0.762268 0.135439 0.177684 0.289533 0.532783
3 4 0.681116 0.210267 0.08419 0.024427 0.071115 0.448466 0.282327 0.198093 0.001277 0.03564 0.337502 0.625581
Converged in: 96

10000 input:
3 3 0.695076 0.061701 0.243223 0.136912 0.70395 0.159139 0.133335 0.251502 0.615163
3 4 0.705129 0.181013 0.100637 0.013222 0.082307 0.439148 0.325287 0.153258 0.054769 0.174516 0.18473 0.585985
Converged in: 71
----------------------------------------

Random Matrixes 3 (Question 8)
1000 input:
3 3 0.818663 0.103323 0.078014 0.011501 0.625672 0.362826 0.24001 0.230423 0.529567
3 4 0.051195 0.40194 0.27966 0.267206 0.747057 0.252935 0.0 8e-06 0.001834 0.030947 0.413927 0.553293
Converged in: 225

10000 input:
3 3 0.612414 0.078377 0.309209 0.195686 0.54998 0.254334 0.1754 0.189521 0.635079
3 4 0.073184 0.170923 0.165993 0.589901 0.881868 0.118126 0.0 7e-06 0.06495 0.425283 0.353802 0.155965
Converged in: 338
----------------------------------------

4 Hidden states & 4 observations (Question 9)
1000 input:
4 4 0.467727 0.0 0.189158 0.343115 0.381394 0.440957 0.067302 0.110347 0.244886 0.008055 0.747059 0.0 0.02826 0.371488 0.006148 0.594104
4 4 0.0 0.000805 0.370592 0.628603 0.325454 0.615718 0.058811 1.8e-05 0.692253 0.186731 0.085465 0.035551 0.0 0.29619 0.368578 0.335231
Converged in: 357

10000 input:
4 4 0.112418 0.141767 0.16736 0.578456 0.076836 0.617066 0.122148 0.18395 0.319539 0.019185 0.661276 0.0 0.247932 0.207007 0.106265 0.438796
4 4 0.217333 0.181031 0.18429 0.417345 0.088515 0.493558 0.355015 0.062912 0.713953 0.185816 0.09739 0.002841 0.011817 0.223555 0.208456 0.556171
Converged in: 133

2 hidden states & 4 observations (Question 9)
1000 input:
2 2 0.813513 0.186487 0.341015 0.658985
2 4 0.002824 0.293928 0.319613 0.383635 0.679548 0.165351 0.084926 0.070175
Converged in: 74

10000 input:
2 2 0.818913 0.181087 0.341498 0.658502
2 4 0.03312 0.319073 0.267516 0.380291 0.700059 0.177244 0.097266 0.025432
Converged in: 93
----------------------------------------

Uniform Distribution (Question 10)
1000 input:
3 3 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333
3 4 0.243243 0.248248 0.236236 0.272272 0.243243 0.248248 0.236236 0.272272 0.243243 0.248248 0.236236 0.272272
Converged in: 2

10000 input:
3 3 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333 0.333333
3 4 0.264226 0.269927 0.208521 0.257326 0.264226 0.269927 0.208521 0.257326 0.264226 0.269927 0.208521 0.257326
Converged in: 2

Diagonal Matrix (Question 10)
1000 input:
3 3 0 0 0 0 0 0 0.0 0.0 1.0
3 4 0 0 0 0 0 0 0 0 0.243243 0.248248 0.236236 0.272272
Converged in: 2

10000 input:
3 3 0 0 0 0 0 0 0.0 0.0 1.0
3 4 0 0 0 0 0 0 0 0 0.264226 0.269927 0.208521 0.257326
Converged in: 2

Close Solution (Question 10)
1000 input:
3 3 0.687639 0.010365 0.301997 0.097583 0.807069 0.095348 0.20033 0.293955 0.505716
3 4 0.696431 0.231587 0.071246 0.000736 0.068254 0.417266 0.280846 0.233634 0.0 0.00022 0.354978 0.644802
Converged in: 786

10000 input:
3 3 0.69601 0.039256 0.264734 0.118052 0.738511 0.143437 0.151832 0.249772 0.598396
3 4 0.707949 0.18638 0.103727 0.001944 0.099277 0.425669 0.314386 0.160667 0.034537 0.17666 0.189509 0.599293
Converged in: 287
"""

from HMM3_estimate_model import EstimateModel
import tools


def main():
    # Answer
    input_data = """3 3 0.7 0.05 0.25 0.1 0.8 0.1 0.2 0.3 0.5
3 4 0.7 0.2 0.1 0 0.1 0.4 0.3 0.2 0 0.1 0.2 0.7
1 3 1 0 0
"""
    # Question 7
    input_data_2 = """3 3 0.54 0.26 0.20 0.19 0.53 0.28 0.22 0.18 0.6
3 4 0.5 0.2 0.11 0.19 0.22 0.28 0.23 0.27 0.19 0.21 0.15 0.45
1 3 0.3 0.2 0.5
"""
    # Question 8
    input_data_3 = """3 3 0.12 0.44 0.44 0.15 0.31 0.53 0.36 0.39 0.25
3 4 0.12 0.29 0.37 0.21 0.43 0.15 0 0.42 0.08 0.13 0.5 0.29
1 3 0.45 0.5 0.05
"""
    # Question 9
    input_data_4 = """4 4 0.11 0.25 0.31 0.33 0.32 0.20 0.38 0.11 0.37 0.19 0.43 0.00 0.29 0.27 0.06 0.38
4 4 0.22 0.10 0.19 0.49 0.15 0.27 0.51 0.07 0.26 0.22 0.09 0.43 0.14 0.28 0.19 0.39
1 4 0.10 0.25 0.24 0.41
"""
    # Question 9
    input_data_5 = """2 2 0.28 0.72 0.24 0.76
2 4 0.13 0.33 0.41 0.13 0.47 0.13 0.23 0.17
1 2 0.56 0.44
"""
    # Question 10
    input_data_6 = """3 3 0.33 0.33 0.33 0.33 0.33 0.33 0.33 0.33 0.33
3 4 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25
1 3 0.33 0.33 0.33
"""
    # Question 10
    input_data_7 = """3 3 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0
3 4 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25
1 3 0.0 0.0 1.0
"""
    input_data_8 = """3 3 0.68 0.04 0.28 0.12 0.75 0.13 0.18 0.25 0.57
3 4 0.65 0.25 0.09 0.01 0.15 0.35 0.35 0.15 0.05 0.15 0.25 0.55
1 3 0.98 0.01 0.01
"""

    input_data = input_data_8.split("\n")

    with open("hmm_c_N1000.in", "r") as f:
        input_data_seq_1000 = f.readlines()[0]

    with open("hmm_c_N10000.in", "r") as f:
        input_data_seq_10000 = f.readlines()[0]

    A = tools.read_matrix(input_data[0])
    B = tools.read_matrix(input_data[1])
    pi = tools.read_matrix(input_data[2])
    emission_sequence = list(map(int, input_data_seq_10000.split()))

    em = EstimateModel(A, B, pi, emission_sequence)

    em.fit()

    tools.print_matrix(em.A)
    tools.print_matrix(em.B)


if __name__ == '__main__':
    main()
